# Playbook for installing Docker on all hosts
# File name: install-docker.yml
---
- name: Install Docker on all hosts
  hosts: all
  become: yes

  # Thi variables file is used
  vars_files:
    - ../vars.yml

  tasks:
    # Installing the base packages
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common

    # Installing Docker
    - name: Add an apt signing key for docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        # Ubuntu 20.04 dont have docker focal repo => force use bionic
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        #repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
        state: present
        update_cache: yes

    - name: Install docker and its dependencies
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          # for ubuntu 20.04
          # - docker-ce=5:{{ vm.packages.containerd.version }}~3-0~ubuntu-{{ ansible_distribution_release }}
          # - docker-ce-cli=5:{{ vm.packages.containerd.version }}~3-0~ubuntu-{{ ansible_distribution_release }}
          # - containerd.io={{ vm.packages.containerd.version }}
          - docker-ce
          - docker-ce-cli
          - containerd.io
      notify:
        - docker status

    # Copy the daemon.json from local to remote
    - name: Copy the daemon.json config file if it exists
      copy: src=../config/docker/daemon.json dest=/etc/docker/daemon.json
      failed_when: false

    # Add a user named to the “docker” group.
    - name: Add "{{ ansible_ssh_user }}" user to docker group
      user:
        name: "{{ ansible_ssh_user }}"
        group: docker

    - name: Add other users to docker group if exist
      user:
        name: "{{ item.name }}"
        group: docker
      with_items: "{{ vm.users }}"
      when: vm.users is defined

  # Setup a handler for checking Docker daemon
  handlers:
    - name: docker status
      service: name=docker state=started
