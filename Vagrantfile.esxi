# -*- mode: ruby -*-
# # vi: set ft=ruby :

# Specify minimum Vagrant version and Vagrant API version
Vagrant.require_version '>= 2.2.4'
VAGRANTFILE_API_VERSION = '2'

# required_plugins = %w[vagrant-reload vagrant-persistent-storage vagrant-vbguest vagrant-proxyconf nugrant]
# plugins_to_install = required_plugins.reject { |plugin| Vagrant.has_plugin? plugin }
# unless plugins_to_install.empty?
#   puts "Installing plugins: #{plugins_to_install.join(' ')}"
#   if system "vagrant plugin install #{plugins_to_install.join(' ')}"
#     exec "vagrant #{ARGV.join(' ')}"
#   else
#     abort 'Installation of one or more plugins has failed. Aborting.'
#   end
# end

# Box / OS
#VAGRANT_BOX = 'generic/ubuntu2004'
VAGRANT_BOX = 'generic/ubuntu1804'
VAGRANT_BOX_VERSION = '3.0.28'
# Host folder to sync
HOST_PATH = '.'

# Require JSON module
require 'json'
require 'yaml'

file_root = File.dirname(File.expand_path(__FILE__))
vagrant_dir = __dir__

# Read YAML file with box details
provider = 'esxi'
vm_config = JSON.parse(File.read(File.join(File.dirname(__FILE__), "config/config-#{provider}.json")))
puts "JSON Config: #{vm_config}" 

# # Admin account
# admin = vm_config['admin']

# Virtualization servers 
servers = vm_config['servers']

# # Read YAML file with box details
# ansible_conf = YAML.load_file("config/packages.yml")
# puts "Packages: #{ansible_conf}" 

sync_dir = '/home/vagrant'
debug = 'false'

#  Fully documented Vagrantfile available
#  https://www.vagrantup.com/docs/vagrantfile/

Vagrant.configure(2) do |config|

    # Required these plugins
    config.vagrant.plugins = [
        "vagrant-hostmanager" => {"version" => "1.8.9"},
        "vagrant-vmware-esxi" => {"version" => "2.4.4"},
        "vagrant-reload" => {"version" => "0.0.1"},
        # "vagrant-disksize"
    ]

    # If true, Vagrant will automatically insert a keypair to use for SSH, 
    # replacing Vagrant's default insecure key inside the machine if detected. 
    # By default, this is true.
    # This only has an effect if you do not already use private keys for authentication 
    # or if you are relying on the default insecure key. If you do not have to care about security 
    # in your project and want to keep using the default insecure key, set this to false.
    #config.ssh.insert_key = false

    # If false, this setting will not include the compression setting 
    # when ssh'ing into a machine. If this is not set, it will default to true 
    # and Compression=yes will be enabled with ssh.
    # config.ssh.compression=false

    # If true, this setting SSH will send keep-alive packets every 5 seconds by default to keep connections alive.
    #config.ssh.keep_alive = true

    # The command to use when executing a command with sudo. 
    # This defaults to sudo -E -H %c. The %c will be replaced by the command that is being executed.
    # config.ssh.sudo_command = "sudo -E -H %c"

    # Hostmanager Config
    # Need to install the plugin vagrant-hostmanger
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = false
    config.hostmanager.manage_guest = true
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.include_offline = true

    # Server host
    servers.each do |server|

        # Cluster nodes (Virtual Machines) to create
        nodes = server['nodes']

        # Create cluster VM
        nodes.each do |node|

            config.vm.define node['name'] do |n|

                # https://www.vagrantup.com/docs/vagrantfile/machine_settings.html
                box = node['box']
                n.vm.box = box['name']
                n.vm.box_version = box['version']

                # The URL that the configured box can be found at. 
                # If config.vm.box is a shorthand to a box in HashiCorp's Vagrant Cloud 
                # then this value does not need to be specified. Otherwise, it should point 
                # to the proper place where the box can be found if it is not installed. 
                # This can also be an array of multiple URLs. The URLs will be tried in order.
                
                # Note that any client certificates, insecure download settings, 
                # and so on will apply to all URLs in this list. 
                # The URLs can also be local files by using the file:// scheme. For example: "file:///tmp/test.box".
                #n.vm.box_url = "http://repo.release.xxxxx.yyy/nexus/content/repositories/vagrant/com/xxxxx/vagrant/rhel73/1.0.0/rhel73-1.0.0.box"
                
                # If true, then SSL certificates from the server will not be verified. 
                # By default, if the URL is an HTTPS URL, then SSL certs will be verified.
                n.vm.box_download_insecure = true

                n.vm.hostname = node['name']

                # The time in seconds that Vagrant will wait for the machine to boot and be accessible. 
                # By default this is 300 seconds.
                n.vm.boot_timeout = 600
                
                # Networks
                # https://www.vagrantup.com/docs/networking/private_network.html
                #n.vm.network :private_network, ip: node['ip'], auto_config: false
                n.vm.network :private_network, ip: node['ip']

                #
                #  Provider (esxi) settings
                #
                #  Fully documented Vagrantfile available
                #  in the wiki:  https://github.com/josenk/vagrant-vmware-esxi/wiki
                n.vm.provider :vmware_esxi do |esxi|

                    #  REQUIRED!  ESXi hostname/IP
                    esxi.esxi_hostname = server['host']

                    #  ESXi username
                    esxi.esxi_username = server['username']

                    #  IMPORTANT!  Set ESXi password.
                    #    1) 'prompt:'
                    #    2) 'file:'  or  'file:my_secret_file'
                    #    3) 'env:'  or 'env:my_secret_env_var'
                    #    4) 'key:'  or  key:~/.ssh/some_ssh_private_key'
                    #    5) or esxi.esxi_password = 'my_esxi_password'
                    #
                    esxi.esxi_password = server['password']

                    #  SSH port.
                    esxi.esxi_hostport = server['ssh_port']

                    #  HIGHLY RECOMMENDED!  ESXi Virtual Network
                    #    You should specify an ESXi Virtual Network!  If it's not specified, the
                    #    default is to use the first found.  You can specify up to 10 virtual
                    #    networks using an array format.
                    #esxi.esxi_virtual_network = ['VM Network','VM Network2','VM Network3','VM Network4']
                    esxi.esxi_virtual_network = server['network']

                    #  OPTIONAL.  Specify a Disk Store
                    esxi.esxi_disk_store = server['datastore']

                    #  OPTIONAL.  Resource Pool
                    #     Vagrant will NOT create a Resource pool it for you.
                    #esxi.esxi_resource_pool = '/Vagrant'

                    #  Optional. Specify a VM to clone instead of uploading a box.
                    #    Vagrant can use any stopped VM as the source 'box'.   The VM must be
                    #    registered, stopped and must have the vagrant insecure ssh key installed.
                    #    If the VM is stored in a resource pool, it must be specified.
                    #    See wiki: https://github.com/josenk/vagrant-vmware-esxi/wiki/How-to-clone_from_vm
                    #esxi.clone_from_vm = 'resource_pool/source_vm'

                    #  OPTIONAL.  Guest VM name to use.
                    #    The Default will be automatically generated.
                    esxi.guest_name = node['name']

                    #  OPTIONAL.  When automatically naming VMs, use this prefix.
                    #esxi.guest_name_prefix = 'V-'

                    #  OPTIONAL.  Set the guest username login.  The default is 'vagrant'.
                    #esxi.guest_username = 'vagrant'

                    #  OPTIONAL.  Memory size override
                    esxi.guest_memsize = node['memory']

                    #  OPTIONAL.  Virtual CPUs override
                    esxi.guest_numvcpus = node['cpus']

                    #  OPTIONAL & RISKY.  Specify up to 10 MAC addresses
                    #    The default is ovftool to automatically generate a MAC address.
                    #    You can specify an array of MAC addresses using upper or lower case,
                    #    separated by colons ':'.
                    #esxi.guest_mac_address = ['00:50:56:aa:bb:cc', '00:50:56:01:01:01','00:50:56:02:02:02','00:50:56:BE:AF:01' ]

                    #   OPTIONAL & RISKY.  Specify a guest_nic_type
                    #     The validated list of guest_nic_types are 'e1000', 'e1000e', 'vmxnet',
                    #     'vmxnet2', 'vmxnet3', 'Vlance', and 'Flexible'.
                    #esxi.guest_nic_type = 'e1000'

                    #  OPTIONAL. Specify a disk type.
                    #    If unspecified, it will be set to 'thin'.  Otherwise, you can set to
                    #    'thin', 'thick', or 'eagerzeroedthick'
                    esxi.guest_disk_type = 'thin'

                    #  OPTIONAL. Boot disk size.
                    #    If unspecified, the boot disk size will be the same as the original
                    #    box.  You can specify a larger boot disk size in GB.  The extra disk space
                    #    will NOT automatically be available to your OS.  You will need to
                    #    create or modify partitions, LVM and/or filesystems.
                    esxi.guest_boot_disk_size = node['disk']

                    #  OPTIONAL.  Create additional storage for guests.
                    #    You can specify an array of up to 13 virtual disk sizes (in GB) that you
                    #    would like the provider to create once the guest has been created.  You
                    #    can optionally specify the size and datastore using a hash.
                    #esxi.guest_storage = [ 10, 20, { size: 30, datastore: 'datastore1' } ]

                    #  OPTIONAL. specify snapshot options.
                    #esxi.guest_snapshot_includememory = 'true'
                    #esxi.guest_snapshot_quiesced = 'true'

                    #  RISKY. guest_guestos
                    #    https://github.com/josenk/vagrant-vmware-esxi/ESXi_guest_guestos_types.md
                    #esxi.guest_guestos = 'centos-64'

                    #  OPTIONAL. guest_virtualhw_version
                    #    ESXi 6.5 supports these versions. 4,7,8,9,10,11,12,13 & 14.
                    #esxi.guest_virtualhw_version = '9'

                    #  RISKY. guest_custom_vmx_settings
                    #esxi.guest_custom_vmx_settings = [['vhv.enable','TRUE'], ['floppy0.present','TRUE']]

                    #  OPTIONAL. local_lax
                    #esxi.local_lax = 'true'

                    #  OPTIONAL. Guest IP Caching
                    esxi.local_use_ip_cache = 'True'

                    #  DANGEROUS!  Allow Overwrite
                    #    If unspecified, the default is to produce an error if overwriting
                    #    VMs and packages.
                    #esxi.local_allow_overwrite = 'True'

                    #  Advanced Users.
                    #    If set to 'True', all WARNINGS will produce a FAILURE and Vagrant will stop.
                    #esxi.local_failonwarning = 'True'

                    #  Plugin debug output.
                    #    Please send any bug reports with this debug output...
                    if debug == 'true'
                        esxi.debug = 'true ip vmx'
                    end
                end

                # Create user
                user = node['user']
                user_name = user['name']
                user_password = user['password']
                user_home = '/home/' + user['name']
                n.vm.provision "shell" do |shell|
                    shell.path = "scripts/create-user.sh"
                    shell.args = [user_name, user_password, user_home]
                end

                # # Create admin user
                # admin_home = '/home/' + admin['name']
                # n.vm.provision "shell", inline: <<-SHELL
                #     useradd -s /bin/bash -d /home/#{admin_home} -m -G sudo #{admin['name']} -p #{admin['password']}
                # SHELL

                # Force password change on first use
                #n.vm.provision 'shell', inline: 'chage --lastday 0 vagrant'

                # Configuring network
                nameservers = server['nameservers']
                gateway = server['gateway']
                n.vm.provision "shell" do |s|
                    s.path = "scripts/configure-network.sh"
                    s.args = [provider, nameservers, gateway]
                end

                # Restart the VM after everything is installed
                n.vm.provision :reload
            end
        end
    end
end